from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram import types

from loader import dp
from states import register
from utils.misc import rate_limit


@rate_limit(limit=15)
@dp.message_handler(Command('register'))
async def register_process(message: types.Message):
    await message.answer(f'{message.from_user.full_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!\n'
                         f'1. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è')
    await register.test1.set()

@rate_limit(limit=15)
@dp.message_handler(text='üåë–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def register_process(message: types.Message):
    await message.answer(f'{message.from_user.full_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!\n'
                         f'1. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è')
    await register.test1.set()

@rate_limit(limit=15)
@dp.message_handler(state=register.test1)
async def state1(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(test1=answer)
    await message.answer('2. –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
    await register.test2.set()

@rate_limit(limit=15)
@dp.message_handler(state=register.test2)
async def state2(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(test1=answer)
    data = await state.get_data()
    name = data.get('test2')
    years = data.get('test1')
    try:
        intyears = int(years)
    except:
        await message.answer(f'–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    if intyears > 13:
        await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! —Ç–µ–ø–µ—Ä—å —Ç—ã –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç!')
        await register.test2.set()
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–ø–ø–æ—Ä—Ç—É, –µ—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏/–∏–ª–∏ –ø–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏. /help –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞')
    await state.finish()


